{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "ws"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Goldex Robot terminal serves JSONRPC 2 API and accepts Websocket connections on localhost\\:80\\/ws. Websocket messages are textual, not binary.\n\nHow to read the document.\nThis doc is generated according to OpenAPI 2, so JSONRPC methods are defined as POST methods. Actual method name is defined after slash symbol.\nFor example\\:\n\n`\"POST /inlet.open\"`\n\nmeans JSONRPC request\n\n`{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"inlet.open\",\"params\":{...}}`",
    "title": "Terminal JSONRPC API.",
    "version": "1.0.0"
  },
  "host": "localhost:80",
  "basePath": "/ws",
  "paths": {
    "/call": {
      "post": {
        "description": "Performs a call to a named backend method defined in Goldex dashboard.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Other"
        ],
        "summary": "Call named backend method.",
        "operationId": "Call",
        "parameters": [
          {
            "description": "JSONRPC params",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CallRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result",
            "schema": {
              "$ref": "#/definitions/CallResult"
            }
          }
        }
      }
    },
    "/eval.hydro": {
      "post": {
        "description": "Starts a hydrostatic evaluation of the item. Should be called right after `eval.spectrum`.\nOn successful hydrostatic evaluation the item might be returned back to customer with `eval.return`.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Evaluation"
        ],
        "summary": "Hydrostatic evaluation [III].",
        "operationId": "EvalHydro",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Hydrostatic evaluation result",
            "schema": {
              "$ref": "#/definitions/EvalHydroResult"
            }
          }
        }
      }
    },
    "/eval.new": {
      "post": {
        "description": "Prepares a new evaluation operation: check hardware, notify backend server, etc.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Evaluation"
        ],
        "summary": "New evaluation [I].",
        "operationId": "EvalNew",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result (one of)",
            "schema": {
              "$ref": "#/definitions/EvalNewResult"
            }
          }
        }
      }
    },
    "/eval.return": {
      "post": {
        "description": "Starts a returning process of the item. Should be called after spectral/hydrostatic evaluation.\nOn successful returning outlet window should be closed manually: customer choice (preferred) or a timeout.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Evaluation"
        ],
        "summary": "Return item [IV].",
        "operationId": "EvalReturn",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "No payload"
          }
        }
      }
    },
    "/eval.spectrum": {
      "post": {
        "description": "Starts a spectral evaluation of the item. Should be called right after `eval.new`.\nOn successful spectral evaluation the item might be returned back to customer with `eval.return`, otherwise the evaluation should be continued with `eval.hydro`.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Evaluation"
        ],
        "summary": "Spectral evaluation [II].",
        "operationId": "EvalSpectrum",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result (one of)",
            "schema": {
              "$ref": "#/definitions/EvalSpectrumResult"
            }
          }
        }
      }
    },
    "/eval.store": {
      "post": {
        "description": "Requires hardware to transfer successfully evaluated item into the internal storage.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Evaluation"
        ],
        "summary": "Store item [IV].",
        "operationId": "EvalStore",
        "parameters": [
          {
            "description": "JSONRPC params",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EvalStoreRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result (one of)",
            "schema": {
              "$ref": "#/definitions/EvalStoreResult"
            }
          }
        }
      }
    },
    "/hardware": {
      "post": {
        "description": "Call an RPC method of the optional hardware installed within the terminal.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Other"
        ],
        "summary": "Call to hardware.",
        "operationId": "Hardware",
        "parameters": [
          {
            "description": "JSONRPC params",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result",
            "schema": {
              "$ref": "#/definitions/HardwareResult"
            }
          }
        }
      }
    },
    "/inlet.close": {
      "post": {
        "description": "Requires hardware to close inlet window. Should be called right before evaluation launch.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inlet/outlet window"
        ],
        "summary": "Close inlet window.",
        "operationId": "InletClose",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "No payload"
          }
        }
      }
    },
    "/inlet.open": {
      "post": {
        "description": "Requires hardware to open inlet window. Should be called to receive a customer item before evaluation.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inlet/outlet window"
        ],
        "summary": "Open inlet window.",
        "operationId": "InletOpen",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "No payload"
          }
        }
      }
    },
    "/outlet.close": {
      "post": {
        "description": "Requires hardware to close outlet window. Should be called manually after customer item return or storage item extraction.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Inlet/outlet window"
        ],
        "summary": "Close outlet window.",
        "operationId": "OutletClose",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "No payload"
          }
        }
      }
    },
    "/status": {
      "post": {
        "description": "Reports current status: operational status, internet connectivity, optional hardware health.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Other"
        ],
        "summary": "Current status.",
        "operationId": "Status",
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result",
            "schema": {
              "$ref": "#/definitions/StatusResult"
            }
          }
        }
      }
    },
    "/storage.extract": {
      "post": {
        "description": "Requires hardware to extract an item from the specified storage cell and bring it to the outlet window.\nOn successful extraction the outlet window should be closed manually: customer choice (preferred) or a timeout.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Storage"
        ],
        "summary": "Extract item.",
        "operationId": "StorageExtract",
        "parameters": [
          {
            "description": "JSONRPC params",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StorageExtractRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "JSONRPC error"
          },
          "x-jsonrpc-success": {
            "description": "Result (one of)",
            "schema": {
              "$ref": "#/definitions/StorageExtractResult"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CallRequest": {
      "type": "object",
      "properties": {
        "body": {
          "description": "request key-value",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Body",
          "example": {
            "bar": [
              "baz",
              "qux"
            ],
            "foo": "bar"
          }
        },
        "method": {
          "description": "method name",
          "type": "string",
          "x-go-name": "Method",
          "example": "my-method"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "CallResult": {
      "type": "object",
      "properties": {
        "body": {
          "description": "result key-value",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Body",
          "example": {
            "bar": [
              "baz",
              "qux"
            ],
            "foo": "bar"
          }
        },
        "http_status": {
          "description": "http status",
          "type": "integer",
          "format": "int64",
          "x-go-name": "HttpStatus",
          "example": 200
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalHydroResult": {
      "type": "object",
      "properties": {
        "failure": {
          "$ref": "#/definitions/EvalHydroResultFailure"
        },
        "success": {
          "$ref": "#/definitions/EvalHydroResultSuccess"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalHydroResultFailure": {
      "type": "object",
      "properties": {
        "eval_rejected": {
          "description": "one of: no valuable metal found, evaluation is rejected by the backend and should be returned back to customer (fatal)",
          "type": "boolean",
          "x-go-name": "EvalRejected"
        },
        "network_unavailable": {
          "description": "one of: network failure (fatal)",
          "type": "boolean",
          "x-go-name": "NetworkUnavailable"
        },
        "unstable_scale": {
          "description": "one of: weighing scale is affected by a mechanical vibration (fatal)",
          "type": "boolean",
          "x-go-name": "UnstableScale"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalHydroResultSuccess": {
      "type": "object",
      "properties": {
        "alloy": {
          "description": "valuable metal",
          "type": "string",
          "x-go-name": "Alloy",
          "example": "au"
        },
        "carat": {
          "description": "fineness in carats",
          "type": "string",
          "x-go-name": "Carat",
          "example": "14K"
        },
        "confidence": {
          "description": "evaluation confidence, 1.0 - is confident, 0.0 - is not, 0.8 - is \"pretty\" confident",
          "type": "number",
          "format": "double",
          "x-go-name": "Confidence",
          "example": 0.913
        },
        "millesimal": {
          "description": "millesimal fineness, 585 stands for 58.5%, 999 for 99.9%, 9999 for 99.99%",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Millesimal",
          "example": 585
        },
        "purity": {
          "description": "content of the valuable metal in percents",
          "type": "number",
          "format": "double",
          "x-go-name": "Purity",
          "example": 58.5
        },
        "risky": {
          "description": "automatic decision result",
          "type": "boolean",
          "x-go-name": "Risky"
        },
        "weight": {
          "description": "weight in grams",
          "type": "number",
          "format": "double",
          "x-go-name": "Weight",
          "example": 3.141
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalNewResult": {
      "type": "object",
      "properties": {
        "failure": {
          "$ref": "#/definitions/EvalNewResultFailure"
        },
        "success": {
          "$ref": "#/definitions/EvalNewResultSuccess"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalNewResultFailure": {
      "type": "object",
      "properties": {
        "hardware_check": {
          "description": "one of: primary hardware healthcheck failed (retryable)",
          "type": "boolean",
          "x-go-name": "HardwareCheck"
        },
        "network_unavailable": {
          "description": "one of: network failure (retryable)",
          "type": "boolean",
          "x-go-name": "NetworkUnavailable"
        },
        "no_storage_room": {
          "description": "one of: no more room in the storage (retryable)",
          "type": "boolean",
          "x-go-name": "NoStorageRoom"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalNewResultSuccess": {
      "type": "object",
      "properties": {
        "eval_id": {
          "description": "evaluation ID",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "EvalID",
          "example": 42
        },
        "storage_cell": {
          "description": "allocated storage cell address",
          "type": "string",
          "x-go-name": "StorageCell",
          "example": "A1"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalSpectrumResult": {
      "type": "object",
      "properties": {
        "failure": {
          "$ref": "#/definitions/EvalSpectrumResultFailure"
        },
        "success": {
          "$ref": "#/definitions/EvalSpectrumResultSuccess"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalSpectrumResultFailure": {
      "type": "object",
      "properties": {
        "eval_rejected": {
          "description": "one of: no valuable metal found, evaluation is rejected by the backend and should be returned back to customer (fatal)",
          "type": "boolean",
          "x-go-name": "EvalRejected"
        },
        "network_unavailable": {
          "description": "one of: network failure (fatal)",
          "type": "boolean",
          "x-go-name": "NetworkUnavailable"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalSpectrumResultSuccess": {
      "type": "object",
      "properties": {
        "alloy": {
          "description": "valuable metal",
          "type": "string",
          "x-go-name": "Alloy",
          "example": "au"
        },
        "carat": {
          "description": "fineness in carats",
          "type": "string",
          "x-go-name": "Carat",
          "example": "14K"
        },
        "millesimal": {
          "description": "millesimal fineness, 585 stands for 58.5%, 999 for 99.9%, 9999 for 99.99%",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Millesimal",
          "example": 585
        },
        "purity": {
          "description": "content of the valuable metal in percents",
          "type": "number",
          "format": "double",
          "x-go-name": "Purity",
          "example": 58.5
        },
        "spectrum": {
          "description": "spectrum data",
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "x-go-name": "Spectrum",
          "example": {
            "au": 58.5,
            "cu": 14.2
          }
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalStoreRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "description": "occupation domain: `buyout`, `pawnshop` or `other`",
          "type": "string",
          "x-go-name": "Domain",
          "example": "buyout"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalStoreResult": {
      "type": "object",
      "properties": {
        "failure": {
          "$ref": "#/definitions/EvalStoreResultFailure"
        },
        "success": {
          "$ref": "#/definitions/EvalStoreResultSuccess"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalStoreResultFailure": {
      "type": "object",
      "properties": {
        "forbidden": {
          "description": "one of: storing is forbidden",
          "type": "boolean",
          "x-go-name": "Forbidden"
        },
        "network_unavailable": {
          "description": "one of: network failure (retryable)",
          "type": "boolean",
          "x-go-name": "NetworkUnavailable"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "EvalStoreResultSuccess": {
      "type": "object",
      "properties": {
        "cell": {
          "description": "cell address",
          "type": "string",
          "x-go-name": "Cell",
          "example": "A1"
        },
        "transaction": {
          "description": "storing identity",
          "type": "string",
          "x-go-name": "Transaction",
          "example": "6c8ec8b3e88b4fcaac47f781f5e6343e"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "HardwareRequest": {
      "type": "object",
      "properties": {
        "data": {
          "description": "request key-value",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Data",
          "example": {
            "bar": [
              "baz",
              "qux"
            ],
            "foo": "bar"
          }
        },
        "method": {
          "description": "method name",
          "type": "string",
          "x-go-name": "Method",
          "example": "my-method"
        },
        "name": {
          "description": "named hardware",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-pos"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "HardwareResult": {
      "type": "object",
      "properties": {
        "error": {
          "description": "hardware specific error",
          "type": "string",
          "x-go-name": "Error",
          "example": "optional failure description"
        },
        "result": {
          "description": "result key-value",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "x-go-name": "Result",
          "example": {
            "bar": [
              "baz",
              "qux"
            ],
            "foo": "bar"
          }
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "StatusResult": {
      "type": "object",
      "properties": {
        "internet_connection": {
          "description": "internet connectivity",
          "type": "boolean",
          "x-go-name": "InternetConnection",
          "example": true
        },
        "operational": {
          "description": "operational status",
          "type": "boolean",
          "x-go-name": "Operational",
          "example": true
        },
        "optional_hardware": {
          "description": "available optional hardware",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "OptionalHardware",
          "example": {
            "my-pos": true,
            "my-printer": true
          }
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "StorageExtractRequest": {
      "type": "object",
      "properties": {
        "cell": {
          "description": "cell address",
          "type": "string",
          "x-go-name": "Cell",
          "example": "A1"
        },
        "domain": {
          "description": "occupation domain: `pawnshop`, `shop` or `other`",
          "type": "string",
          "x-go-name": "Domain",
          "example": "shop"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "StorageExtractResult": {
      "type": "object",
      "properties": {
        "failure": {
          "$ref": "#/definitions/StorageExtractResultFailure"
        },
        "success": {
          "$ref": "#/definitions/StorageExtractResultSuccess"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "StorageExtractResultFailure": {
      "type": "object",
      "properties": {
        "forbidden": {
          "description": "one of: extraction is forbidden",
          "type": "boolean",
          "x-go-name": "Forbidden"
        },
        "network_unavailable": {
          "description": "one of: network failure (retryable)",
          "type": "boolean",
          "x-go-name": "NetworkUnavailable"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    },
    "StorageExtractResultSuccess": {
      "type": "object",
      "properties": {
        "transaction": {
          "description": "extraction identity",
          "type": "string",
          "x-go-name": "Transaction",
          "example": "6c8ec8b3e88b4fcaac47f781f5e6343e"
        }
      },
      "x-go-package": "github.com/goldexrobot/core.integration/terminal/api/v1"
    }
  }
}