// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: file.proto

package file

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileModelMultiError, or nil
// if none found.
func (m *FileModel) ValidateAll() error {
	return m.validate(true)
}

func (m *FileModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_FileModel_Id_Pattern.MatchString(m.GetId()) {
		err := FileModelValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{32}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileModelMultiError(errors)
	}
	return nil
}

// FileModelMultiError is an error wrapping multiple validation errors returned
// by FileModel.ValidateAll() if the designated constraints aren't met.
type FileModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileModelMultiError) AllErrors() []error { return m }

// FileModelValidationError is the validation error returned by
// FileModel.Validate if the designated constraints aren't met.
type FileModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileModelValidationError) ErrorName() string { return "FileModelValidationError" }

// Error satisfies the builtin error interface
func (e FileModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileModelValidationError{}

var _FileModel_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{32}$")

// Validate checks the field values on FileChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileChunkMultiError, or nil
// if none found.
func (m *FileChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *FileChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetChunk()); l < 1 || l > 131072 {
		err := FileChunkValidationError{
			field:  "Chunk",
			reason: "value length must be between 1 and 131072 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetChunkNum() < 1 {
		err := FileChunkValidationError{
			field:  "ChunkNum",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalChunks() < 1 {
		err := FileChunkValidationError{
			field:  "TotalChunks",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalSize() < 1 {
		err := FileChunkValidationError{
			field:  "TotalSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMime()); l < 1 || l > 32 {
		err := FileChunkValidationError{
			field:  "Mime",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FileChunkMultiError(errors)
	}
	return nil
}

// FileChunkMultiError is an error wrapping multiple validation errors returned
// by FileChunk.ValidateAll() if the designated constraints aren't met.
type FileChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileChunkMultiError) AllErrors() []error { return m }

// FileChunkValidationError is the validation error returned by
// FileChunk.Validate if the designated constraints aren't met.
type FileChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileChunkValidationError) ErrorName() string { return "FileChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileChunkValidationError{}
